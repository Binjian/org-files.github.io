:PROPERTIES:
:ID:       33365862-a767-486c-bc69-8b9984a40ef2
:END:
#+AUTHOR: 忻斌健
#+CREATOR: 忻斌健
#+DATE: <2023-09-20 mon>
#+STARTUP: latexpreview
#+LATEX_COMPILER: xelatex
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper, 11pt]
#+OPTIONS: tex:t
#+OPTIONS: ^:{}
#+DOWNLOAD_IMAGE_DIR:  '~/.org.d/roam/img'
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: reve
#+OPTIONS: toc:1
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_MARGIN: 0.01
#+REVEAL_MIN_SCALE: 0.05
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_THEME: sky
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./grids.css
#+HTML_HEAD_EXTRA: <style> .figure p {text-align: center;}</style>
* language as glue layer between low-level perception and high-level decision


** Overall architecture

 #+name: fig. Block Diagram
 #+begin_src mermaid :file ~/.org.d/roam/img/llm4ad/blocks.png
 flowchart TD
    Sensor--> ADSW[Classic AD Perception SW stack] -->|code instruction|Prompt[Prompt Template]
    Sensor--> E2EMM[Visual Langue Model]:::NN
    Sensor--> E2EMMF[Foundational Visual Language Model]:::NN
    subgraph NL_as_Interface[Natural Language as interface]
     Prompt-->|"`**textual scenario description**`"|LLM:::NN
     E2EMM-->|embedding|decoder[Text Decoder]-->|"`**textual scenario description**`"|LLM
     LLM-->|"`**formatted textual control instruction**`"|Decoder[Code Adapter]:::NN
     E2EMMF-->|"`**formatted textual control instruction**`"|Decoder
    end
    Decoder-->|"`**code instruction**`"|Planning[Planning&Tracking]-->|"`**Lateral & Longitudinal Control Trajctory**`"|Vehicle[Vehicle Control]
    classDef NN fill:#0f0
 #+end_src

 #+caption[dataflow]: Block Diagram
 #+results: Fig. Block diagram
 [[file:~/.org.d/roam/img/llm4ad/blocks.png]]


** Option 1: Classic AD and LLM

 #+name: fig. Block Diagram Classic SW stack and LLM  with text interface
 #+begin_src mermaid :file ~/.org.d/roam/img/llm4ad/classic-ad-llm-e2e.png
 flowchart TD
    Sensor--> ADSW[Classic AD Perception SW stack]-->|code instruction|Prompt[Prompt Template]
    subgraph LLM_Interface[Natural language as Interface]
    Prompt[Prompt Template]-->|"`**textual scenario description**`"|LLM:::NN-->|"`**formatted textual control instruction**`"|Decoder[Code Adapter]:::NN
    end
    Decoder[Code Adapter]:::NN-->|"`**code instruction**`"|Planning[Planning&Tracking]-->|"`**Lateral & Longitudinal Control Trajctory**`"|Vehicle[Vehicle Control]
    classDef NN fill:#0f0
 #+end_src

 #+RESULTS: fig. Block Diagram Classic SW stack and LLM  with text interface
 [[file:~/.org.d/roam/img/llm4ad/classic-ad-llm-e2e.png]]
*** Scenario 1 Highway lane change ()
** option 2 VLM and LLM

 #+name: fig. Block Diagram Visual Languange Model and LLM  with text interface
 #+begin_src mermaid :file ~/.org.d/roam/img/llm4ad/blocks-vlm-e2e.png
 flowchart TD
    Sensor--> E2EMM[Visual Langue Model]:::NN
    subgraph NL_as_Interface[Natural Language as Interface]
     Prompt[Prompt Template]-->
     E2EMM-->|embedding|decoder[Text Decoder]-->|"`**textual scenario description**`"|LLM:::NN -->|"`**formatted textual control instruction**`"|Decoder[Code Adapter]:::NN
    end
    Decoder-->|"`**code instruction**`"|Planning[Planning&Tracking]-->|"`**Lateral & Longitudinal Control Trajctory**`"|Vehicle[Vehicle Control]
    classDef NN fill:#0f0
 #+end_src

 #+RESULTS: fig. Block Diagram Visual Languange Model and LLM  with text interface
 [[file:~/.org.d/roam/img/llm4ad/blocks-vlm-e2e.png]]

*** Scene analysis from VLM (Image captioning; Prompt), --> LLM chain (extraction + prompt)

** Option3 Foundational VLM (GPT4)
 #+name: fig. Block Diagram More E2E
 #+begin_src mermaid :file ~/.org.d/roam/img/llm4ad/blocks-e2e.png
 flowchart TD
    Sensor--> E2EMMF[Foundatinal Visual Language Model]:::NN
    subgraph NL_as_Interface[Natural langaue as Interface]
     E2EMMF-->|"`**formatted textual control instruction**`"|Decoder[Code Adapter]:::NN
    end
    Decoder-->|"`**code instruction**`"|Planning[Planning&Tracking]-->|"`**Lateral & Longitudinal Control Trajctory**`"|Vehicle[Vehicle Control]
    classDef NN fill:#0f0
 #+end_src

 #+RESULTS: fig. Block Diagram More E2E
 [[file:~/.org.d/roam/img/llm4ad/blocks-e2e.png]]

* Introduction
** prior art
** issues
*** not robust
*** corner cases
*** long-tail
* Solved Problems
** traffic rules and regulations as in natural language (small rigid limited rules in the general language repertoire)
** common sense based high-level planning
** regulation based high-level planning

* Implementation
** Input from powerful E2E model Image Captioning (Image understanding) like BLIP2/Flamingo vision-and-language pre-training
*** Prompt Template with limited scenario database (keywords road, traffic light, pedestrian, motorcycle, bicycle, truck, vehicles, crosswalk, sidewalk)
*** Raw Sensor(Video) data, point cloud
*** query Vision-Languange model to get description
**** BLIP2
**** LLaVA
** as montioring for validation of decision module on a higher level
** as direct decision module
** output with Response Schema for easy extraction of parameter (as motion descriptor)
** output with dynamic generation of implementation code interpretable language/compiling language (Reward translator = motion descriptor + reward coder)
* Innovation
** LLM fast for complex scenario
** can use ToT, agent
** suitable for both classic AD SW stack and End-to-End Neural Network
** output parser
** Prompt Template
** Scenario Database
*** for each scenario, multiple templates, corresponding traditional system requirements specifications, can even import the SRS for existing documents
** Interpretatbility
*** can output intermediate result, thought process
** output parser/eval
** Use Cases
*** Highway Lane Change
**** Prompt Template for highway lane change decision
#+NAME: Prompt Template for Highway Lane Change Decision
#+BEGIN_SRC python :session :results output
import os
import openai
from dotenv import load_dotenv
from pathlib import Path  # Python 3.6+ only
import pprint
pp = pprint.PrettyPrinter(indent=4)
# load_dotenv(verbose=True)
env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)
openai_api_key=os.environ.get('OPENAI_API4_LANGCHAIN')
openai.proxy = os.environ.get('HTTP_PROXY')


from langchain.llms import OpenAI
from langchain import PromptTemplate

llm = OpenAI(model_name="text-davinci-003", openai_api_key=openai_api_key)

template = """
"You're an experienced safe driver. {objects_on_left_lane}. The front car is {front_car_distance} ahead of me {front_car_speed}. I'm driving {ego_speed}. {condition_of_urgency}, should I change my lane or keep following the front car?"
"""
prompt1 = PromptTemplate(
    input_variables=["objects_on_left_lane","front_car_distance", "front_car_speed", "ego_speed", "condition_of_urgency"],
    template=template,
)
pp.pprint(f"prompt1: {prompt1}")
#return prompt1
# prompt1
#+END_SRC

#+RESULTS: Prompt Template for Highway Lane Change Decision
: ("prompt1: input_variables=['objects_on_left_lane', 'front_car_distance', "
:  "'front_car_speed', 'ego_speed', 'condition_of_urgency'] output_parser=None "
:  'partial_variables={} template=\'\\n"You\\\'re an experienced safe driver. '
:  '{objects_on_left_lane}. The front car is {front_car_distance} ahead of me '
:  "{front_car_speed}. I\\'m driving {ego_speed}. {condition_of_urgency}, should "
:  'I change my lane or keep following the front car?"\\n\' '
:  "template_format='f-string' validate_template=True")


**** Prompt Template for code adapter
#+NAME: Prompt Template for Code Adapter
#+BEGIN_SRC python :session :results output
from langchain.output_parsers import StructuredOutputParser, ResponseSchema
from langchain.prompts import ChatPromptTemplate, HumanMessagePromptTemplate
from langchain import PromptTemplate

response_schemas = [
    ResponseSchema(name="lateral_drive_decision", description="This is the drive decision to change or not change the lane, it's value should be either 'change' or 'keep'"),
    ResponseSchema(name="longitudinal_drive_decision", description="This is the drive decision to accelerate, decelerate, or maintain the speed, its value should be either 'accelerate', 'decelerate', or 'maintain'"),
]
output_parser = StructuredOutputParser.from_response_schemas(response_schemas)

format_instructions = output_parser.get_format_instructions()

template = """
You will be given a string with drive decision from a user with an objective.
Extract the lateral and longitudinal drive decision and make sure all the words are spelled correctly.

{format_instructions}

% USER_OBJECTIVE:
{user_objective}

% USER INPUT:
{user_input}

YOUR RESPONSE:
"""

prompt2 = PromptTemplate(
    input_variables=["user_objective", "user_input"],
    partial_variables={"format_instructions": format_instructions},
    template=template
)

pp.pprint(f"prompt2: {prompt2}")
#+END_SRC

#+RESULTS: Prompt Template for Code Adapter
#+begin_example
("prompt2: input_variables=['user_objective', 'user_input'] output_parser=None "
 "partial_variables={'format_instructions': 'The output should be a markdown "
 'code snippet formatted in the following schema, including the leading and '
 'trailing "```json" and '
 '"```":\\n\\n```json\\n{\\n\\t"lateral_drive_decision": string  // This is '
 "the drive decision to change or not change the lane, it\\'s value should be "
 'either \\\'change\\\' or \\\'keep\\\'\\n\\t"longitudinal_drive_decision": '
 'string  // This is the drive decision to accelerate, decelerate, or maintain '
 "the speed, its value should be either \\'accelerate\\', \\'decelerate\\', or "
 "\\'maintain\\'\\n}\\n```'} template='\\nYou will be given a string with "
 'drive decision from a user with an objective.\\nExtract the lateral and '
 'longitudinal drive decision and make sure all the words are spelled '
 'correctly.\\n\\n{format_instructions}\\n\\n% '
 'USER_OBJECTIVE:\\n{user_objective}\\n\\n% USER '
 "INPUT:\\n{user_input}\\n\\nYOUR RESPONSE:\\n' template_format='f-string' "
 'validate_template=True')
#+end_example


**** S1: following

#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_16584629.png]]

#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_165912single_mo_follow.gif]]

***** Input prompt to the LLM and the LLM output:
#+NAME: S1 scenario
#+BEGIN_SRC python :session :results output
final_prompt = prompt1.format(objects_on_left_lane="There are no cars on the left lane and the left lane is clear",front_car_distance='200 meters',front_car_speed='and with the same speed as me', ego_speed='slower than the speed limit', condition_of_urgency='When there is nothing special')
pp.pprint(f"Prompt: {final_prompt}")

output = llm(final_prompt)
pp.pprint(f"llm output: {output}")
#+END_SRC

#+RESULTS: S1 scenario
#+begin_example
('Prompt: \n'
 '"You\'re an experienced safe driver. There are no cars on the left lane and '
 'the left lane is clear. The front car is 200 meters ahead of me and with the '
 "same speed as me. I'm driving slower than the speed limit. When there is "
 'nothing special, should I change my lane or keep following the front car?"\n')
('llm output: \n'
 'It depends on your preference and the situation. Generally, it is safest to '
 'stay in the lane you are in, as changing lanes can be dangerous. If you feel '
 'comfortable changing lanes, you can do so as long as the left lane is clear. '
 'Make sure to always check your blind spot and use your turn signal before '
 'changing lanes.')
#+end_example

***** Input prompt to the code adapter (LLM)
#+NAME: output of code adapter
#+BEGIN_SRC python :session :results output
promptValue = prompt2.format(user_objective="I am a defensive driver.",user_input=output)
pp.pprint(f"prompt: {promptValue}")
llm_output=llm(promptValue)
pp.pprint(f"llm_output: {llm_output}")
control_action = output_parser.parse(llm_output)
pp.pprint(f"contorl code: {control_action}")
#+END_SRC

#+RESULTS: output of code adapter
#+begin_example
('prompt: \n'
 'You will be given a string with drive decision from a user with an '
 'objective.\n'
 'Extract the lateral and longitudinal drive decision and make sure all the '
 'words are spelled correctly.\n'
 '\n'
 'The output should be a markdown code snippet formatted in the following '
 'schema, including the leading and trailing "```json" and "```":\n'
 '\n'
 '```json\n'
 '{\n'
 '\t"lateral_drive_decision": string  // This is the drive decision to change '
 "or not change the lane, it's value should be either 'change' or 'keep'\n"
 '\t"longitudinal_drive_decision": string  // This is the drive decision to '
 'accelerate, decelerate, or maintain the speed, its value should be either '
 "'accelerate', 'decelerate', or 'maintain'\n"
 '}\n'
 '```\n'
 '\n'
 '% USER_OBJECTIVE:\n'
 'I want to pass the front vehicle which is slower than me.\n'
 '\n'
 '% USER INPUT:\n'
 '\n'
 'It is usually best to stay in the lane you are in, unless you need to change '
 'lanes to pass or turn. Since the car in the left lane is going slower than '
 'you, and the front car is a sufficient distance ahead of you, it would be '
 'better for you to stay in the same lane.\n'
 '\n'
 'YOUR RESPONSE:\n')
('llm output: \n'
 '```json\n'
 '{\n'
 '\t"lateral_drive_decision": "keep", \n'
 '\t"longitudinal_drive_decision": "accelerate"\n'
 '}\n'
 '```')
("control code: {'lateral_drive_decision': 'keep', "
 "'longitudinal_drive_decision': 'accelerate'}")
#+end_example


***** Construct the prompt:
****** example selector,
****** prompt (template),
****** output parser (ResponseSchema) and eval/output_parser (llm/chat)
****** evaluation (quality check) with QAEvalChain for finetuning and retraining.

**** S2: overtaking

#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_16565229.png]]

#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_165636single_mo_takeover.gif]]


***** Input prompt to the LLM
#+NAME: S2 scenario
#+BEGIN_SRC python :session :results output
final_prompt = prompt1.format(objects_on_left_lane="There are no cars on the left lane and the left lane is clear",front_car_distance='10 meters',front_car_speed='and with a speed much slower than me and will block my lane', ego_speed='slower than the speed limit', condition_of_urgency='When there is nothing special')
pp.pprint(f"prompt: {final_prompt}")

output = llm(final_prompt)

pp.pprint(f"llm output: {output}")

#+END_SRC

#+RESULTS: S2 scenario
#+begin_example
('prompt: \n'
 '"You\'re an experienced safe driver. There are no cars on the left lane and '
 'the left lane is clear. The front car is 10 meters ahead of me and with a '
 "speed much slower than me and will block my lane. I'm driving slower than "
 'the speed limit. When there is nothing special, should I change my lane or '
 'keep following the front car?"\n')
('llm output: \n'
 'It would depend on the traffic conditions around you. If there are no cars '
 'in the left lane and it is clear, then you can certainly change lanes. '
 'However, you should always use your best judgement and be aware of the '
 'traffic conditions around you. If there is a car approaching from behind, or '
 'if the road ahead is not clear, then it might be safest to stay in your lane '
 'and follow the car in front of you.')
#+end_example

***** Input prompt to the code adapter (LLM)
#+NAME: S2 output of code adapter
#+BEGIN_SRC python :session :results output
promptValue = prompt2.format(user_objective="I am comfortable with changing lane.",user_input=output)
pp.pprint(f"prompt: {promptValue}")
llm_output=llm(promptValue)
pp.pprint(f"llm output: {llm_output}")
control_action = output_parser.parse(llm_output)
pp.pprint(f"control code: {control_action}")
#+END_SRC

#+RESULTS: S2 output of code adapter
#+begin_example
('prompt: \n'
 'You will be given a string with drive decision from a user with an '
 'objective.\n'
 'Extract the lateral and longitudinal drive decision and make sure all the '
 'words are spelled correctly.\n'
 '\n'
 'The output should be a markdown code snippet formatted in the following '
 'schema, including the leading and trailing "```json" and "```":\n'
 '\n'
 '```json\n'
 '{\n'
 '\t"lateral_drive_decision": string  // This is the drive decision to change '
 "or not change the lane, it's value should be either 'change' or 'keep'\n"
 '\t"longitudinal_drive_decision": string  // This is the drive decision to '
 'accelerate, decelerate, or maintain the speed, its value should be either '
 "'accelerate', 'decelerate', or 'maintain'\n"
 '}\n'
 '```\n'
 '\n'
 '% USER_OBJECTIVE:\n'
 'I am comfortable with changing lane.\n'
 '\n'
 '% USER INPUT:\n'
 '\n'
 'It would depend on the traffic conditions around you. If there are no cars '
 'in the left lane and it is clear, then you can certainly change lanes. '
 'However, you should always use your best judgement and be aware of the '
 'traffic conditions around you. If there is a car approaching from behind, or '
 'if the road ahead is not clear, then it might be safest to stay in your lane '
 'and follow the car in front of you.\n'
 '\n'
 'YOUR RESPONSE:\n')
('llm output: ```json\n'
 '{\n'
 '\t"lateral_drive_decision": "change",\n'
 '\t"longitudinal_drive_decision": "maintain"\n'
 '}\n'
 '```')
("control code: {'lateral_drive_decision': 'change', "
 "'longitudinal_drive_decision': 'maintain'}")
#+end_example


**** S3: no lane changing

#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_16483829.png]]

#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_164911double_mo_ng.gif]]


***** Input prompt to the LLM
#+NAME: S3 scenario
#+BEGIN_SRC python :session :results output
final_prompt = prompt1.format(objects_on_left_lane="There is one car on the left lane 50 meters behind me with the same speed as me",front_car_distance='closely in front of me',front_car_speed='with a lower speed than me', ego_speed="at the speed limit", condition_of_urgency='When there is nothing special')
pp.pprint(f"prompt: {final_prompt}")
output = llm(final_prompt)
pp.pprint(f"llm output: {output}")

#+END_SRC

#+RESULTS: S3 scenario
#+begin_example
('prompt: \n'
 '"You\'re an experienced safe driver. There is one car on the left lane 50 '
 'meters behind me with the same speed as me. The front car is closely in '
 "front of me ahead of me with a lower speed than me. I'm driving at the speed "
 'limit. When there is nothing special, should I change my lane or keep '
 'following the front car?"\n')
('llm output: \n'
 'It is generally best practice to stay in your current lane and maintain the '
 'speed limit. If the car behind you is driving the same speed as you, you '
 'should not feel the need to change lanes. You should also maintain a safe '
 'distance from the car in front of you. If the driver in the other lane is '
 'driving faster than you, you could consider changing lanes.')
#+end_example

***** Input prompt to the code adapter (LLM)
#+NAME: S3 output of code adapter
#+BEGIN_SRC python :session :results output
promptValue = prompt2.format(user_objective="I am comfortable with changing lane.",user_input=output)
pp.pprint(f"prompt: {promptValue}")
llm_output=llm(promptValue)
pp.pprint(f"llm output: {llm_output}")
control_action = output_parser.parse(llm_output)
pp.pprint(f"control code: {control_action}")
#+END_SRC

#+RESULTS: S3 output of code adapter
#+begin_example
('prompt: \n'
 'You will be given a string with drive decision from a user with an '
 'objective.\n'
 'Extract the lateral and longitudinal drive decision and make sure all the '
 'words are spelled correctly.\n'
 '\n'
 'The output should be a markdown code snippet formatted in the following '
 'schema, including the leading and trailing "```json" and "```":\n'
 '\n'
 '```json\n'
 '{\n'
 '\t"lateral_drive_decision": string  // This is the drive decision to change '
 "or not change the lane, it's value should be either 'change' or 'keep'\n"
 '\t"longitudinal_drive_decision": string  // This is the drive decision to '
 'accelerate, decelerate, or maintain the speed, its value should be either '
 "'accelerate', 'decelerate', or 'maintain'\n"
 '}\n'
 '```\n'
 '\n'
 '% USER_OBJECTIVE:\n'
 'I am comfortable with changing lane.\n'
 '\n'
 '% USER INPUT:\n'
 '\n'
 'It is generally best practice to stay in your current lane and maintain the '
 'speed limit. If the car behind you is driving the same speed as you, you '
 'should not feel the need to change lanes. You should also maintain a safe '
 'distance from the car in front of you. If the driver in the other lane is '
 'driving faster than you, you could consider changing lanes.\n'
 '\n'
 'YOUR RESPONSE:\n')
('llm output: \n'
 '```json\n'
 '{\n'
 '\t"lateral_drive_decision": "keep", \n'
 '\t"longitudinal_drive_decision": "maintain"\n'
 '}\n'
 '```')
("control code: {'lateral_drive_decision': 'keep', "
 "'longitudinal_drive_decision': 'maintain'}")
#+end_example


**** S4: lane changing


#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_16482429.png]]

#+attr_org: :width 300px
[[./img/Use_Cases/_20231011_164921double_mo.gif]]

***** Input prompt to the LLM
#+NAME: S4 scenario
#+BEGIN_SRC python :session :results output
final_prompt = prompt1.format(objects_on_left_lane="There is one car on the left lane 250 meters away with a lower speed than me but otherwise the left lane is clear",front_car_distance='in a reducing distance closely',front_car_speed='with a lower speed than me', ego_speed="a little bit slower than the speed limit on the right lane", condition_of_urgency='When there is nothing special')

pp.pprint(f"prompt: {final_prompt}")
output = llm(final_prompt)
pp.pprint(f"llm output: {output}")

#+END_SRC

#+RESULTS: S4 scenario
#+begin_example
('prompt: \n'
 '"You\'re an experienced safe driver. There is one car on the left lane 250 '
 'meters away with a lower speed than me but otherwise the left lane is clear. '
 'The front car is in a reducing distance closely ahead of me with a lower '
 "speed than me. I'm driving a little bit slower than the speed limit on the "
 'right lane. When there is nothing special, should I change my lane or keep '
 'following the front car?"\n')
('llm output: \n'
 'It depends on your comfort level. If you feel safe behind the car in front, '
 'I would recommend keeping your current lane. However, if you feel more '
 'comfortable switching lanes, then you should consider changing lanes. If the '
 'left lane is clear and you feel comfortable changing lanes, you can do so. '
 'Ultimately, you should make the decision that best suits your comfort level.')
#+end_example

***** Input prompt to the code adapter (LLM)
#+NAME: S4 output of code adapter
#+BEGIN_SRC python :session :results output
promptValue = prompt2.format(user_objective="I want to pass the front vehicle which is slower than me.", user_input=output)
pp.pprint(f"prompt: {promptValue}")
llm_output=llm(promptValue)
pp.pprint(f"llm output: {llm_output}")
control_action = output_parser.parse(llm_output)
pp.pprint(f"control code: {control_action}")
#+END_SRC

#+RESULTS: S4 output of code adapter
#+begin_example
('prompt: \n'
 'You will be given a string with drive decision from a user with an '
 'objective.\n'
 'Extract the lateral and longitudinal drive decision and make sure all the '
 'words are spelled correctly.\n'
 '\n'
 'The output should be a markdown code snippet formatted in the following '
 'schema, including the leading and trailing "```json" and "```":\n'
 '\n'
 '```json\n'
 '{\n'
 '\t"lateral_drive_decision": string  // This is the drive decision to change '
 "or not change the lane, it's value should be either 'change' or 'keep'\n"
 '\t"longitudinal_drive_decision": string  // This is the drive decision to '
 'accelerate, decelerate, or maintain the speed, its value should be either '
 "'accelerate', 'decelerate', or 'maintain'\n"
 '}\n'
 '```\n'
 '\n'
 '% USER_OBJECTIVE:\n'
 'I want to pass the front vehicle which is slower than me.\n'
 '\n'
 '% USER INPUT:\n'
 '\n'
 'It depends on your comfort level. If you feel safe behind the car in front, '
 'I would recommend keeping your current lane. However, if you feel more '
 'comfortable switching lanes, then you should consider changing lanes. If the '
 'left lane is clear and you feel comfortable changing lanes, you can do so. '
 'Ultimately, you should make the decision that best suits your comfort '
 'level.\n'
 '\n'
 'YOUR RESPONSE:\n')
('llm output: \n'
 '```json\n'
 '{\n'
 '\t"lateral_drive_decision": "change", \n'
 '\t"longitudinal_drive_decision": "accelerate"\n'
 '}\n'
 '```')
("control code: {'lateral_drive_decision': 'change', "
 "'longitudinal_drive_decision': 'accelerate'}")
#+end_example

*** TODO Crossing (turning, pedestrian)
**** concurrent execution of multiple hypothesis and syntheses

*** TODO Parking decision
** TODO Agent
* Advantage
** language is a very robust form of scenario description comparing to classic AD SW code instruction
** seamless integration with current software stack
*** flexible to be local (small finetuned) or large (cloud foundational, commercial)
** extention to end2end network
** DRL from scratch too complicated, should find it in the language
** LLM has the knowledge of world, including traffic, pedestrian, vehicles, decision logic, programming technology
** LLM can be fine-tuned, distilled
** interpretable
** Very fast, and with concurrent, complex conversation in massive parallelism (much faster than human)
** extendable by dataset and retraining
** safety guarantee by output parser and extra programmatic/NLP instruction
** agents
*** chat
*** memory
*** self-correction
*** evolving
*** tools/toolkit
** Chain/Tree/Graph of Thoughts
*** straightforward sequential
*** summarization chain with text splitter
